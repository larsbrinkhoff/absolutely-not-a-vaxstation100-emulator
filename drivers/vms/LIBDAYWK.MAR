	.TITLE	LIB$DAY_OF_WEEK		; Find numeric day of week
	.IDENT	'V03-000'
;
;
; FACILITY: Language-independent support library
;++
; ABSTRACT:
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;

	.SBTTL	HISTORY		; Detailed Current Edit History

; EDIT HISTORY:
;
; 1-001 - 

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_LIB$CODE		PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;

	offset	= 7-5		; make monday 1, tuesday 2, etc.


	.SBTTL	LIB$DAY_OF_WEEK - 

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the numeric day of the week for an input time
;	value.  If the input value is ommited, the current day of the week
;	today is, is returned.  Monday is considered day 1, and Sunday day
;	7.
;
; CALLING SEQUENCE:
;
;	ret = LIB$DAY_OF_WEEK	( time_64_bit_Q, output_day_L)
;
; INPUT PARAMETERS:
;
;	time_64_bit_Q - Address of a quadword representing time or 0
;
; IMPLICIT INPUTS:
;
;	If time_64_bit_Q is 0, then the current system time is used.
;
; OUTPUT PARAMETERS:
;
;	output_day_L  - Address of a longword to recieve the day
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL 	- success
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.entry	-
lib$day_of_week,^M<>
	movl	#lib$_invarg,r0	; assume error
	cmpb	#2,(ap)		; are there at least 2 arguments
	bgtru	100$		; branch if not
	movl	4(ap),r1	; get address of quadword time
	bneq	20$		; branch if specified
	movaq	-(sp),r1	; area to recieve time in, r1 addr of area
	$gettim_s (r1)		; get current time
	blbc	r0,100$		; branch if error
20$:	movq	(r1),r0		; get the time
	ediv	#60*10*1000*1000,r0,r0,r1 ; get the time in minutes
	clrl	r1		; time in minutes from 1858 is only 32 bits
	ediv	#24*60,r0,r0,r1	; time in days into r0
	addl	#offset,r0	; account for Nov 17, 1858 being a Wednesday
	clrl	r1		; again only 32 bits
	ediv	#7,r0,r0,r1	; r0 number of weeks, r1 day of week
	addl3	#1,r1,@8(ap)	; store the day number
	movl	#1,r0		; set success
100$:	ret			; exit, clean stack if needed

	.end

!---
!
!	Commonly used definitions for VMS modules written in BLISS
!
! Version:	'V04-000'
!

!++
! ABSTRACT:
!
!	This is the common require file for any module written
!	in BLISS
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
!----

!
!	Equated symbols
!

LITERAL
    true	= 1,			! boolean true
    false	= 0,			! boolean false
    ok		= 1,			! success return code
    error	= 2,			! error return code
    quad	= 8;			! quadword allocation definition

!
!	Define structure type for VMS structures
!

STRUCTURE
    bblock [o, p, s, e; n] =
		[n]
		(bblock+o)<p,s,e>;

MACRO
    move_quad (src, dst) =	! Move a quadword
	BEGIN
	(dst)+0 = .(src)<0, 32>;
	(dst)+4 = .(src)<32,32>;
	END%;

MACRO
    descriptor [] =		! Generate a static string descriptor
	UPLIT (%CHARCOUNT (%STRING (%REMAINING)),
	       UPLIT BYTE (%STRING (%REMAINING))) %;

MACRO
    own_desciptor [] =		! Generate the actual static string descriptor
	BBLOCK [8] INITIAL(%CHARCOUNT(%STRING(%REMAINING)),
			UPLIT BYTE (%STRING(%REMAINING))) %;

MACRO
    return_if_error(command) =
	BEGIN
	LOCAL
	    status;

	status = command;
	IF NOT .status
	THEN
	    RETURN .status;
	END%;

MACRO
    signal_if_error(command) =
	BEGIN
	LOCAL
	    status;

	status = command;
	IF NOT .status
	THEN
	    BEGIN
	    SIGNAL(.status);
	    RETURN .status;
	    END;
	END%;

!
! Macro to implement a function (f) of the message severity level that
! maps the various severity levels such that arithmetic comparisions of the
! mapped values (  f(severity) )  yield a order of precedence that is 
! intuivitvely acceptable:
!
!
!		ERROR NAME     OLDVAL     NEWVAL
!
!		F(SUCCESS)	  1   -->   0
!		F(INFORMATIONAL)  3   -->   2
!		F(WARNING)	  0   -->   3
!		F(ERROR)	  2   -->   5
!		F(SEVERE_ERROR)	  4   -->   7
!

MACRO
    severity_level (status) =
	BEGIN
	LOCAL code: BBLOCK [LONG];
	code = status;
	.code [sts$v_severity] - (4 * .code [sts$v_success]) + 3
	END%;

MACRO
    cli$external(prefix) =
	%IF %DECLARED(%QUOTE %QUOTE cli$prefix)
		%THEN UNDECLARE %QUOTE %QUOTE cli$prefix; %FI
	MACRO cli$prefix = prefix %QUOTE %;
	EXTERNAL LITERAL
	    cli$external_loop(%REMAINING)%,

    cli$external_loop[name] =
	%NAME(cli$prefix,name): UNSIGNED(8)%;

MACRO
    $external_literal(symbol) =
	BEGIN
	%IF NOT %DECLARED(symbol) %THEN EXTERNAL LITERAL symbol
	%IF %LENGTH GTR 1 %THEN : %REMAINING %FI; %FI
	symbol
	END%;

MACRO
    $fab_dev(dev_bit) =		! Access FAB$L_DEV bits of FAB block
	$BYTEOFFSET(fab$l_dev),
	$BITPOSITION(%NAME('dev$v_',dev_bit)),1,0%;

!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., COPY)
!	    "code" is the corresponding facility code (e.g., 103)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (e.g., 1, 0, 2)
!

MACRO
    $SHR_MESSAGES( FACILITY_NAME, FACILITY_CODE ) =
	LITERAL
	SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, %REMOVE(VALUE) ) %,

    SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME(FACILITY_NAME,'$_',MSG_ID) = %NAME('SHR$_',MSG_ID) + FACILITY_CODE*65536 +
	    %IF %DECLARED(%NAME('STS$K_',SEVERITY))
		%THEN %NAME('STS$K_',SEVERITY)
		%ELSE SEVERITY %FI %;


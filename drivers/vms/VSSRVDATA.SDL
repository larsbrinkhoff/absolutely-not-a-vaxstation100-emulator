MODULE vsta$srvdata;
/*	Data structures for VSSERVE
/*
/*+++
/* Facility:
/*
/*	VAX Workstation Human Interface process
/*
/* Abstract:
/*
/*	This file contains data structure definitions and symbols for
/*	the VSSERVE component of the VAX Workstation software.
/*
/* Environment:
/*
/*
/*---

/*
/* Misc. Useful constants
/*
CONSTANT flag_off EQUALS 0;
CONSTANT flag_set EQUALS 1;
CONSTANT param$k_hi_vs_color EQUALS 9; /* 50% grey
/*
/* Width of borders for all windows
/*
CONSTANT vsta$k_window_border_size	EQUALS 10;
CONSTANT vsta$k_window_border_color	EQUALS 3;	/* Shows selectability
						    /* attribute pretty well.
CONSTANT vsta$k_window_border_color_sel EQUALS 15;
/*
/* Width of outer black borders of all user objects.
/*
CONSTANT vsta$k_outer_border_width	EQUALS 2;
/*
/* Height of all headers
/* Room for 16-pixel high font + 2-pixel horizontal line at bottom
/*
CONSTANT vsta$k_header_height		EQUALS 22;
/*
/* Width of the "VAXstation utility area"
/*
CONSTANT vsta$K_util_width		EQUALS 122;
/*
/* Height of footer VD on documents
/* Room for 16-pixel high font + 2-pixel horizontal line at top
/* + some space to make it wider (an easier target)
/*
CONSTANT vsta$K_doc_footer_height	EQUALS 30;
/*
/* Pixels at bottom of screen that can't be pointed to.  Caution:  This number
/* is chosen such that user can move authorization form under symbol bar
/* and still successfully select tiny piece of authorization form border
/* that is visible between symbol bar and bottom of screen.  
/*
CONSTANT vsta$K_bottom_nopoint		EQUALS 3;
/*
/* Pixels at right side of screen that can't be pointed to
/*
CONSTANT vsta$K_right_nopoint		EQUALS 0;
/*
/* Pixels at left side of screen that can't be pointed to
/*
CONSTANT vsta$K_left_nopoint		EQUALS 0;

/*
/* Job reference block data structure
/* One copy of this is kept for each user process; or H.I. document
/*
#max_chars_in_jobname = 15;	/* Max number of characters in a job name
CONSTANT vsta$K_max_chars_jobname EQUALS #max_chars_in_jobname;
CONSTANT vsta$K_size_x_jobname EQUALS 1 + (10 * #max_chars_in_jobname);
/* 1 + <len needed> because default field starts at 1.
CONSTANT vsta$K_size_y_jobname EQUALS 20;

AGGREGATE job_block STRUCTURE PREFIX jrb$;
	flink		ADDRESS;
	blink		ADDRESS;
	pid		LONGWORD;	/* Process id for the job
	jobnum		LONGWORD;	/* Which "job number" it is.
	mtwin		ADDRESS;	/* address of main window block
	mttype		LONGWORD;	/* Main terminal type
	slot		LONGWORD;	/* Number of slot stored in (0 if on
					/* terminal screen; else 1 to 12)
	last_vkb_wdb	LONGWORD;	/* Last WDB where keyboard was
					/* attached. Used to put keyboard
					/* back when job is restored to screen.
	last_vtb_wdb	ADDRESS;	/* Last WDB where tablet was attached.
	wdb_q_hdr_fl	ADDRESS;	/* Window queue header
	wdb_q_hdr_bl	ADDRESS;
	job_name_vd	LONGWORD;	/* Vd-id where jobname is
	job_name_len	LONGWORD;	/* # chars in job name
	job_name	BYTE DIMENSION (#max_chars_in_jobname);	/*
CONSTANT block_length EQUALS .;
END job_block;

/*
/* Window data block structure
/*
/*  There is one window list for each job.
/*  Each window block provides information for the display of a window or
/*  a terminal.
/*
#max_chars_in_wname = 200;	/* Max number of characters in a window name
CONSTANT vsta$K_max_chars_wname EQUALS #max_chars_in_wname;
AGGREGATE window_data_block STRUCTURE PREFIX wdb$;
	flink			ADDRESS;	/* Forward link
	blink			ADDRESS;	/* Backward link
	jrb			ADDRESS;	/* Ptr back to owner JRB
	id			WORD;		/* Id for this block
	    /* NOTE:  Don't "merely" expand the id field to larger than a
	    /* word without also redoing the code in VSSRVFORM that stuffs
	    /* the id and other data into a single ast parameter.
	u_window_id		LONGWORD;	/* Id of the user's window
	u_pb_id			LONGWORD;	/* User PB id / VKB-id
	term_vd_id		LONGWORD;	/* VD-id kept for
						/* emulated terminals
	hi_window_id		LONGWORD;	/* Id of the HI's window
	hi_pb_id		LONGWORD;	/* Id of the HI's PB
	hi_pb_width		WORD UNSIGNED;	/* Width of the HI's PB
	hi_pb_height		WORD UNSIGNED;	/* Height of the HI's PB
	header_vd_id		LONGWORD;	/* VD-id used for the header
	win_border_vd_id	LONGWORD;	/* Vd-id used for the
						/* window border
	name_field_start	WORD UNSIGNED;	/* Where name field starts
	name_field_width	WORD UNSIGNED;	/* Width of VP name field
	jobname_field_start	WORD UNSIGNED;	/* Where jobname "field" starts
	indic_field_start	WORD UNSIGNED;	/* Where indicator field starts
	hold_on_flag		BYTE UNSIGNED;	/* =1 if HOLD is on
	tab_on_flag		BYTE UNSIGNED;	/* =1 if TAB is activated
	kbd_on_flag		BYTE UNSIGNED;	/* =1 if KBD is activated
	window_type		BYTE UNSIGNED;	/* Which type of window this is
	indic_len		BYTE UNSIGNED;	/* Length of indic string
	indic_string		BYTE DIMENSION (6);	/* String of indicators
						/* and separators
	tab_char_idx		BYTE UNSIGNED;	/*0 or 1
	kbd_char_idx		BYTE UNSIGNED;	/*0, 1, or 3
	hold_char_idx		BYTE UNSIGNED;	/*0, 1, 3, or 5
	ter_wdb		ADDRESS;		/* adr of terminal's wdb iff
						/* this wdb represents a
						/* settings document
	name_desc	ADDRESS;	/* Address of window name descriptor
	ts_docblk	ADDRESS;	/* if non-0, address of settings
					/* document block
	u_vp_id		LONGWORD;	/* User's viewport id
	u_vp_x_coor	LONGWORD;	/* Coordinates of user's viewport
	u_vp_y_coor	LONGWORD;	/*  on the VS
	u_vp_width	LONGWORD;	/* Width of user's viewport
	u_vp_height	LONGWORD;	/* Height
	hi_vp_id	LONGWORD;	/* HI's viewport id
	hi_vp_x_coor	LONGWORD;	/* Coordinates of HI's viewport
	hi_vp_y_coor	LONGWORD;	/*  on the VS
	hi_vp_width	LONGWORD;
	hi_vp_height	LONGWORD;
	vp_help_keyword	ADDRESS;	/* Address of descriptor to help kwd.
	win_bezel_vd_id	LONGWORD;	/* Vd-id used for the
CONSTANT block_length EQUALS .;

/*
/* Window types
/*
CONSTANT (
	wtype_user,
	wtype_vt100,
	wtype_4014,
	wtype_vsserve,
	wtype_help,			/* The HELP document
	wtype_prof,			/* PROFILE document
	wtype_notice,			/* NOTICES document
	wtype_ts			/* SETTINGS document
	) EQUALS 1 INCREMENT 1 COUNTER #high;
CONSTANT lowest_wtype EQUALS 1;
CONSTANT highest_wtype EQUALS #high;

END window_data_block;


AGGREGATE doc_block STRUCTURE PREFIX dkb$;
	wdb		ADDRESS;	/* Address of wdb that displays it
	hdr_address	ADDRESS;	/* Ptr to file header data
	fab		ADDRESS;	/* Address of FAB

	cur_page	WORD;		/* Current page displayed
	cur_page_type	WORD;		/* Type of current page
					/* 0=BODY, 1=TOC, 2=INDEX
	vd_of_body	LONGWORD;	/* VD-id of the body
	body_size_x	WORD;		/* X-size of body
	body_size_y	WORD;		/* Y-size of body
	pb		LONGWORD;	/* Pasteboard
	pb_size_x	WORD UNSIGNED;	/* X-size of pasteboard
	pb_size_y	WORD UNSIGNED;	/* Y-size of pasteboard
	window_id	LONGWORD;	/* Window id
	vd_footer	LONGWORD;	/* VD-id of the footer
	high_pagenum	WORD UNSIGNED;	/* Highest page number
	page_total	WORD UNSIGNED;	/* Total # of pages (TOC+BODY+IDX)
	num_pic_blks	WORD UNSIGNED;	/* Number of picture blocks for this pg
	pic_blk		ADDRESS;	/* Address of picture blocks for this
					/* page, in core. (they're contiguous).
	num_chk_blks	WORD UNSIGNED;	/* Number of check-off entry blocks
	chk_blk		ADDRESS;	/* address of checkoff blocks
	num_edit_blks	WORD UNSIGNED;	/* Number of editable entry blocks
	edit_blk	ADDRESS;	/* Address of editable field blocks
END doc_block;

/*
/* HI menu block
/*
AGGREGATE hi_menu_block STRUCTURE PREFIX hmb$;
	pb		LONGWORD;	/* Pasteboard id
	vd		LONGWORD;	/* VD-id
	width		WORD UNSIGNED;	/* X size
	height		WORD UNSIGNED;	/* Y size
	def_x		WORD UNSIGNED;	/* Default X
	def_y		WORD UNSIGNED;	/* Default Y
END hi_menu_block;

/*
/* Characters used for symbols
/*
CONSTANT ch_sym$tab_off EQUALS 1;
 CONSTANT ch_width$tab_off EQUALS 34;
CONSTANT ch_sym$tab_on EQUALS 2;
 CONSTANT ch_width$tab_on EQUALS ch_width$tab_off;
CONSTANT ch_sym$kbd_off EQUALS 3;
 CONSTANT ch_width$kbd_off EQUALS 35;
CONSTANT ch_sym$kbd_on EQUALS 4;
 CONSTANT ch_width$kbd_on EQUALS ch_width$kbd_off;
CONSTANT ch_sym$hold_off EQUALS 5;
 CONSTANT ch_width$hold_off EQUALS 40;
CONSTANT ch_sym$hold_on EQUALS 6;
 CONSTANT ch_width$hold_on EQUALS ch_width$hold_off;
CONSTANT ch_sym$check_off EQUALS 7;
CONSTANT ch_sym$check_on EQUALS 8;
CONSTANT ch_sym$black_line EQUALS 9;
CONSTANT ch_sym$white_line EQUALS 10;

/*
/* Editable field symbols
/*

/*
/* Flags for vsta$$edit_one
/*
CONSTANT vsta$K_edit_center EQUALS 2;	/* Field format is CENTERed

/*
/* Delimiter types returned
/*
CONSTANT vsta$K_edit_delim_end EQUALS 0;	/* User typed the delimiter
CONSTANT vsta$K_edit_delim_yank EQUALS 1;	/* User selected another fld
CONSTANT vsta$K_edit_delim_timeout EQUALS 2;	/* Timed out.

END_MODULE;

MODULE detached (IDENT = 'V04-000',
	ADDRESSING_MODE(EXTERNAL = GENERAL)) =
BEGIN

!++
! FACILITY:  Login
!
! ABSTRACT:
!
!	This module handles all processing specific to detached jobs.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions
REQUIRE 'SHRLIB$:UTILDEF';		! Common BLISS definitions

REQUIRE 'LIB$:PPDDEF';			! Process permanent data region
REQUIRE 'LIB$:LGIDEF';			! LOGINOUT private permanent storage

!
! Table of contents
!

FORWARD ROUTINE
    init_batch:		NOVALUE,	! Initialize batch job step
    stop_batch_job:	NOVALUE,	! Stop batch job stream
    terminate_batch:	NOVALUE,	! Stop a batch job
    init_network:	NOVALUE,	! Initialize network job
    get_proxy;				! Get proxy username

!
! External routines
!

EXTERNAL ROUTINE
    close_output:	NOVALUE,	! Close primary output file
    validate_uafrec:	NOVALUE,	! Read/validate UAF record
    get_uafrec:		NOVALUE,	! Read UAF record without validiation
    logout_message:	NOVALUE,	! Write logout message
    map_imgact:		NOVALUE,	! Map image activator code segment
    create_logical,			! Create logical name with LNM services
    set_sysprv:		NOVALUE,	! Turn on SYSPRV
    clear_sysprv:	NOVALUE,	! Turn off SYSPRV
    set_uic,				! Set process UIC
    set_node_name:	NOVALUE,	! Set remote node info in P1 space
    exit_process:	NOVALUE,	! Exit the process
    lib$fid_to_name;			! Translate file ID to file name

!
! Define literals
!


!
! Define message codes
!

EXTERNAL LITERAL
    lgi$_jbcmixup,
    lgi$_userauth,
    lgi$_netuafacc;

!
! External storage
!

EXTERNAL
    pcb_sts:		BITVECTOR,	! PCB status flags
    job_type,				! Job type code for JIB
    input_fab:		BBLOCK,		! Input FAB
    input_nam:		BBLOCK,		! Input NAM
    output_fab:		BBLOCK,		! Output FAB
    output_nam:		BBLOCK,		! Output NAM
    uaf_record:		REF BBLOCK,	! Address of UAF record
    sys$input:		VECTOR,		! Translation of SYS$INPUT
    sys$output:		VECTOR,		! Translation of SYS$OUTPUT
    sys$error:		VECTOR,		! Translation of SYS$ERROR
    ctl$ag_clidata;			! Process permanent data storage

BIND
    ppd = ctl$ag_clidata: BBLOCK;	! Address of PPD structure



GLOBAL ROUTINE init_batch: NOVALUE =

!---
!
!	Perform batch initialization by requesting the job parameters
!	from the job controller.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	uaf_record = Address of UAF record for user
!---

BEGIN

OWN
    jobname:	VECTOR [43,BYTE],	! Must be static to be passed back
    logfile:	VECTOR [nam$c_maxrss,BYTE];	! to caller as output filespec

LOCAL
    username : VECTOR[2]		! Descriptor for username
    	       INITIAL(REP 2 OF (0)),
    logdesc:	VECTOR [2],		! Logical name descriptor
    logname:	VECTOR [2,BYTE],	! 2 character logical name
    ptr : REF VECTOR[,WORD],
    length,
    buffer : VECTOR[500],		! SNDJBC message buffer
    flags : REF $BBLOCK INITIAL (0);	! Flags from job controller

!
! Check to see if at early termination of batch job.
!
IF .ppd [ppd$w_outifi] NEQ 0		! If not first job step,
    AND NOT .ppd [ppd$l_lststatus]	! and job step failed,
    AND ((.ppd [ppd$l_lststatus] AND 6) NEQ 0) ! and its an error or fatal,
THEN
    terminate_batch(0);		! Stop the batch job

!
! Request detached job step initialization parameters from job controller
!
BEGIN
LOCAL
    status,
    iosb : VECTOR[2],
    itmlst : $ITMLST_DECL(ITEMS = 1);

$ITMLST_INIT(ITMLST = itmlst,
    	     (ITMCOD = sjc$_batch_output,
 	      BUFSIZ = %ALLOCATION(buffer),
    	      BUFADR = buffer));
status = $SNDJBCW(FUNC   = sjc$_batch_service,
    		  ITMLST = itmlst,
    		  IOSB   = iosb);
IF .status 
THEN status = .iosb[0];
IF NOT .status
THEN SIGNAL_STOP(.status);
END;

!
! Find the flags longword and the username.
!
ptr = buffer;
WHILE true DO
    BEGIN
    IF .ptr[1] EQL 0
    THEN EXITLOOP;
    IF .ptr[1] EQL dji$k_flags
    THEN
	BEGIN
	flags = ptr[2];
	IF .flags[dji$v_terminate]
	THEN stop_batch_job(.flags, buffer, 0);
    	IF .flags[dji$v_delete_file]
    	THEN input_fab[fab$v_dlt] = true; 
	IF .flags[dji$v_restarting]
	THEN ppd[ppd$v_restart] = true;
	IF .username[1] NEQ 0
    	OR .ppd[ppd$w_outifi] NEQ 0
	THEN EXITLOOP;
	END
    ELSE IF .ptr[1] EQL dji$k_username
    THEN
    	BEGIN
	username[1] = ptr[2];
	IF .flags NEQ 0
	THEN EXITLOOP;
	END;
    ptr = ptr[2] + .ptr[0];
    END;

!
! If this is the first job step, then do first_time_thru stuff.
!
IF .ppd [ppd$w_outifi] EQL 0		! If this the first job step,
THEN
    BEGIN
    job_type = jib$c_batch;
!***username [0] = uaf$s_username;	! Setup descriptor of user name
    username [0] = 12;			! Setup descriptor of user name
    get_uafrec(username);		! Get user's UAF record
    IF .uaf_record EQL 0
    THEN
	SIGNAL_STOP(lgi$_userauth);	! signal fatal error
    END;

!
! Now to go thru all the data items in BUFFER, setting up the input and
! output files as indicated, as well as working set parameters and cpu
! time limit, if first job step.
!
logdesc[0] = 2;				! Set up the logical name descriptor
logdesc[1] = logname;
logname[0] = 'P';

output_fab[fab$b_fns] = 0;		! Initialize the file name
ptr = buffer;
WHILE true DO
    BEGIN
    CASE .ptr[1] FROM 0 TO dji$k_wsquota OF
	SET
    	[0] : EXITLOOP;

	[dji$k_wsdefault] :
	    IF .ppd[ppd$w_outifi] EQL 0		! If first job step, set wsdefault
	    THEN
		BEGIN
		IF .flags[dji$v_use_wsdefault]
		THEN uaf_record[uaf$l_dfwscnt] = .(ptr[2])
		ELSE uaf_record[uaf$l_dfwscnt] = MINU(.(ptr[2]),
						      .uaf_record[uaf$l_dfwscnt]);
		END;

	[dji$k_wsextent] :
	    IF .ppd[ppd$w_outifi] EQL 0		! If first job step, set wsextent
	    THEN
		BEGIN
		IF .flags[dji$v_use_wsextent]
		THEN uaf_record[uaf$l_wsextent] = .(ptr[2])
		ELSE uaf_record[uaf$l_wsextent] = MINU(.(ptr[2]),
					               .uaf_record[uaf$l_wsextent]);
		END;

	[dji$k_wsquota] :
	    IF .ppd[ppd$w_outifi] EQL 0		! If first job step, set wsquota
	    THEN
		BEGIN
		IF .flags[dji$v_use_wsquota]
		THEN uaf_record[uaf$l_wsquota] = .(ptr[2])
		ELSE uaf_record[uaf$l_wsquota] = MINU(.(ptr[2]),
						      .uaf_record[uaf$l_wsquota]);
		END;

	[dji$k_cpu_maximum] :
	    IF .ppd[ppd$w_outifi] EQL 0		! If first job step, set CPU time limit
	    THEN
		BEGIN
		IF .flags[dji$v_use_cpu_maximum]
		THEN uaf_record[uaf$l_cputim] = .(ptr[2])
		ELSE uaf_record[uaf$l_cputim] = MINU(.(ptr[2])-1,	! So that 0 > all others
						      .uaf_record[uaf$l_cputim]-1) + 1;
		END;

	[dji$k_job_name] :
	    BEGIN			! Setup output log file name from job name
	    length = .ptr[0];		! get length of job name
	    CH$MOVE(.length, 
		    ptr[2],
    		    jobname);
	    CH$MOVE(4, UPLIT BYTE('.LOG'), jobname + .length);
	    output_fab [fab$l_dna] = jobname;	! Set default to <jobname>.LOG
	    output_fab [fab$b_dns] = .length + 4;
	    END;

	[dji$k_log_specification] :
	    BEGIN 		! Set up the log file name
	    output_fab[fab$b_fns] = .ptr[0];
	    output_fab[fab$l_fna] = logfile;
	    CH$MOVE(.ptr[0],
		ptr[2],
		logfile);
	    END;

	[dji$k_file_identification] :	! Batch input file
	    BEGIN
	    LOCAL
		name_desc	: VECTOR [2],
		dvi_desc	: VECTOR [2],
		name_length	: WORD;
	    CH$MOVE(ppd$c_dvifid,
		    ptr[2],
		    input_nam[nam$t_dvi]);
	    input_fab [fab$v_nam] = true; ! Mark to open input by NAM block
					! Get input file name for CLI
	    name_desc[0] = ppd$s_filename-1;
	    name_desc[1] = ppd[ppd$t_filename]+1;
	    dvi_desc[0] = .VECTOR [input_nam[nam$t_dvi], 0; ,BYTE];
	    dvi_desc[1] = input_nam[nam$t_dvi]+1;
	    IF lib$fid_to_name (dvi_desc, input_nam[nam$w_fid],
				name_desc, name_length)
	    THEN VECTOR [ppd[ppd$t_filename], 0; ,BYTE] = .name_length;
	    END;

	[dji$k_parameter_1 TO dji$k_parameter_8] : 
	    BEGIN
	    LOCAL
		desc: VECTOR[2];
	    desc[0] = .ptr[0];
	    desc[1] = ptr[2];
	    logname [1] = '1' + .ptr[1] - dji$k_parameter_1;
	    create_logical(logdesc,		! Create Pn logical name
			   desc,
			   psl$c_user);
	    END;

	[dji$k_restart] :
	    BEGIN
	    LOCAL
		desc : VECTOR[2];
	    desc[0] = .ptr[0];
	    desc[1] = ptr[2];
	    create_logical(%ASCID 'BATCH$RESTART',
			   desc,
			   psl$c_user);
	    END;

    	[INRANGE] : true;
    	[OUTRANGE] : true;
	TES;
    ptr = ptr[2] + .ptr[0];
    END;

IF .flags[dji$v_log_null]
THEN
    BEGIN
    output_fab [fab$b_fns] = 4;
    output_fab [fab$l_fna] = UPLIT BYTE('_NL:');
    END;

    
END;

GLOBAL ROUTINE terminate_batch(signal_args : REF $BBLOCK): NOVALUE =

!---
!
!	Request a job controller termination message, then stop batch job.
!
! Inputs:
!	Signal arguments or 0.
!
! Outputs:
!
!	Job termination, no return, exit via exit process
!---

BEGIN

LOCAL
    status,				! Status return from SNDJBC
    input_buffer:	$BBLOCK[50],	! SNDJBC input buffer
    buffer:		$BBLOCK[500],	! SNDJBC output buffer
    p : REF $BBLOCK,			! Cursor for input buffer
    ptr : REF VECTOR[,WORD],		! Pointer to buffer contents
    iosb : VECTOR[2],			! Final status from SNDJBC
    itmlst : $ITMLST_DECL(ITEMS = 2);	! SNDJBC item list


!
! Initialize SNDJBC input buffer.
!
p = input_buffer;

p[dji$w_item_code] = dji$k_input_flags;	! Inhibit return of a file
p[dji$w_item_size] = 4;
p = .p + dji$s_item_header;
.p = dji$m_no_file;
p = .p + 4;

IF .signal_args NEQA 0			! If signal arguments present
THEN
    BEGIN
    LOCAL
	i:		REF $BBLOCK;	! Pointer to item header

    i = .p;
    p[dji$w_item_code] = dji$k_condition_vector;
    p[dji$w_item_size] = 4;
    p = .p + dji$s_item_header;
    .p = .signal_args[4,0,32,0];	! Primary condition
    p = .p + 4;
    IF .signal_args[0,0,8,0] GEQU 3
    THEN
	BEGIN
	i[dji$w_item_size] = 8;
	.p = .signal_args[12,0,32,0];	! STS, if present
	p = .p + 4;
	END;
    IF .signal_args[0,0,8,0] GEQU 4
    THEN
	BEGIN
	i[dji$w_item_size] = 12;
	.p = .signal_args[16,0,32,0];	! STV, if present
	p = .p + 4;
	END;
    END;
.p = 0;					! Zero terminate list


!
! Request parameters from job controller.
!
$ITMLST_INIT(ITMLST = itmlst,
    	     (ITMCOD = sjc$_batch_input,
 	      BUFSIZ = %ALLOCATION(input_buffer),
    	      BUFADR = input_buffer),
    	     (ITMCOD = sjc$_batch_output,
 	      BUFSIZ = %ALLOCATION(buffer),
    	      BUFADR = buffer));
status = $SNDJBCW(FUNC   = sjc$_batch_service,
    		  ITMLST = itmlst,
    		  IOSB   = iosb);
IF .status 
THEN status = .iosb[0];
IF NOT .status
THEN stop_batch_job(UPLIT(0), 0, .signal_args);

!
! Look for the flags word.  Once that is found, we can call the routine
! to actually stop this job.
!
ptr = buffer;
WHILE .(ptr[0]) NEQ 0 DO
    BEGIN
    IF .ptr[1] EQL dji$k_flags
    THEN stop_batch_job(ptr[2], buffer, .signal_args);
    ptr = ptr[2] + .ptr[0];
    END;
    

END;

ROUTINE stop_batch_job (flags, buffer, signal_args): NOVALUE =

!---
!
!	This routine is called to terminate a job stream as a result
!	of an operator request or failure of an individual job step.
!
! Inputs:
!
!	flags = Address of flags longword from job controller
!	djt = Address of entire buffer from job controller
!
! Outputs:
!
!	There is no return - the image is exited.
!---

BEGIN

MAP
    flags : REF $BBLOCK,		! Address of options longword
    signal_args : REF $BBLOCK;		! Address of signal arguments or 0

BIND
    lgi = .ppd [ppd$l_lgi]: BBLOCK;	! Address the LGI area


!
! Write the logout message.
!
logout_message();			! Write logout message

!
! 
IF .flags[dji$v_log_delete]		! If delete of output file requested
AND NOT .flags[dji$v_log_spool]		! and no print,
THEN
    output_fab [fab$v_dlt] = true;	! then set to delete on close

$CMEXEC(ROUTIN = close_output);		! Close log file so we can print it

$CMKRNL(ROUTIN = set_uic, ARGLST = .lgi [lgi$l_origuic]); ! Reset UIC

IF .flags[dji$v_log_spool]		! If output file is to be printed
THEN
    BEGIN
    LOCAL
	wrdptr : REF VECTOR[,WORD],
    	ptr : REF VECTOR,		! Pointer to item list
	queue_name : VECTOR[2] 		! Place for queue name
		     INITIAL(0,0),
	job_name : VECTOR[2]		! Place for job name
		   INITIAL(0,0),
	itmlst : VECTOR[30],		! Item list for SNDJBC
	input_buffer : VECTOR[128];	! Batch input item

!
! We need to find the queue name, as well as the job name, before starting
! to fill out the itemlist.
!
    wrdptr = .buffer;			! Point at the buffer
    WHILE true DO			! Go thru buffer
	BEGIN
	IF .wrdptr[1] EQL 0
	THEN EXITLOOP;
	IF .wrdptr[1] EQL dji$k_log_queue
	THEN
	    BEGIN
	    queue_name[0] = .wrdptr[0];
	    queue_name[1] = wrdptr[2];
	    IF .job_name[1] NEQ 0
	    THEN EXITLOOP;
	    END
	ELSE IF .wrdptr[1] EQL dji$k_job_name
	THEN
	    BEGIN
	    job_name[0] = .wrdptr[0];
	    job_name[1] = wrdptr[2];
	    IF .queue_name[1] NEQ 0
	    THEN EXITLOOP;
	    END;
	wrdptr = wrdptr[2] + .wrdptr[0];
	END;
!
! If no queue name was found, then use SYS$PRINT.
!
    IF .queue_name[0] EQL 0
    THEN
	BEGIN
	queue_name[0] = %CHARCOUNT('SYS$PRINT');
	queue_name[1] = UPLIT BYTE('SYS$PRINT');
	END;
!
! Now to fill in the itemlist.
!
    ptr = itmlst;			! Start at beginning of item list
!
! The queue name is either in the JBC buffer, or else we should use 
! SYS$PRINT.
!
    ptr[0] = sjc$_queue^16 OR .queue_name[0];
    ptr[1] = .queue_name[1];
    ptr[2] = 0;
    ptr = ptr[3];
!
! Also put in the job name.
!
    ptr[0] = sjc$_job_name^16 OR .job_name[0];
    ptr[1] = .job_name[1];
    ptr[2] = 0;
    ptr = ptr[3];
!
! Add /NOTIFY if requested.
!
    IF .flags[dji$v_notify]
    THEN
	BEGIN
	ptr[0] = sjc$_notify^16;
	ptr[1] = ptr[2] = 0;
	ptr = ptr[3];
	END;
!
! If the log file exists, add its information.
!
    IF CH$RCHAR(ppd[ppd$t_outdvi]) NEQ 0
    THEN
	BEGIN
!
! File ID
!
	ptr[0] = sjc$_file_identification^16 OR ppd$c_dvifid;
	ptr[1] = ppd[ppd$t_outdvi];
	ptr[2] = 0;
	ptr = ptr[3];
!
! Add /DELETE if requested.
!
	IF .flags[dji$v_log_delete]
	THEN
	    BEGIN
	    ptr[0] = sjc$_delete_file^16;
	    ptr[1] = ptr[2] = 0;
	    ptr = ptr[3];
	    END;
!
! The log file always gets a header page.
!
	ptr[0] = sjc$_page_header^16;
	ptr[1] = ptr[2] = 0;
	ptr = ptr[3];
	END
!
! If no log file exists, attempt to print messages.
!
    ELSE IF .signal_args NEQA 0
    THEN
	BEGIN
	LOCAL
	    i : REF $BBLOCK,	! Pointer to item header
	    p : REF $BBLOCK;	! Pointer to input buffer

	p = i = input_buffer;
	p[dji$w_item_code] = dji$k_condition_vector;
	p[dji$w_item_size] = 4;
	p = .p + dji$s_item_header;
	.p = .signal_args[4,0,32,0];		! Primary condition
	p = .p + 4;
	IF .signal_args[0,0,8,0] GEQU 3
	THEN
	    BEGIN
	    i[dji$w_item_size] = 8;
	    .p = .signal_args[12,0,32,0];	! STS, if present
	    p = .p + 4;
	    END;
	IF .signal_args[0,0,8,0] GEQU 4
	THEN
	    BEGIN
	    i[dji$w_item_size] = 12;
	    .p = .signal_args[16,0,32,0];	! STV, if present
	    p = .p + 4;
	    END;

	IF .output_nam[nam$b_rsl] NEQ 0
	THEN
	    BEGIN
	    p[dji$w_item_code] = dji$k_file_specification;
	    p[dji$w_item_size] = .output_nam[nam$b_rsl];
	    p = .p + dji$s_item_header;
	    p = CH$MOVE(
		.output_nam[nam$b_rsl],
		.output_nam[nam$l_rsa],
		.p);
	    END
	ELSE IF .output_nam[nam$b_esl] NEQ 0
	THEN
	    BEGIN
	    p[dji$w_item_code] = dji$k_file_specification;
	    p[dji$w_item_size] = .output_nam[nam$b_esl];
	    p = .p + dji$s_item_header;
	    p = CH$MOVE(
		.output_nam[nam$b_esl],
		.output_nam[nam$l_esa],
		.p);
	    END
	ELSE
	    BEGIN
	    p[dji$w_item_code] = dji$k_file_specification;
	    p[dji$w_item_size] = .output_fab[fab$b_fns];
	    p = .p + dji$s_item_header;
	    p = CH$MOVE(
		.output_fab[fab$b_fns],
		.output_fab[fab$l_fna],
		.p);
	    END;

	.p = 0;					! Zero terminate list
	p = .p + 4;

	ptr[0] = sjc$_batch_input^16 OR (.p - input_buffer);
	ptr[1] = input_buffer;
	ptr[2] = 0;
	ptr = ptr[3];
	END;
!
! Done.  Put in a zero longowrd
!
    ptr[0] = 0;

    $SNDJBCW(FUNC = sjc$_enter_file,
    	     ITMLST = itmlst);
    END;

$CMEXEC(ROUTIN = exit_process);		! Terminate process

END;

GLOBAL ROUTINE init_network: NOVALUE =

!---
!
!	Perform initializations of a network job.  The primary logical
!	names have been setup by the calling process (NETACP).
!
! Inputs:
!
!	sys$input = Name of command procedure to be invoked
!	sys$output = 3 concatenated ASCIC access control strings
!				(username, password, account)
!	sys$error = Network control block (NCB) for connect
!
! Outputs:
!
!	uaf_record = Address of UAF record, if any
!---

BEGIN

LOCAL
    len,
    ptr,
    username:	VECTOR [2],		! Username descriptor
    password:	VECTOR [2],		! Password descriptor
    account:	VECTOR [2];		! Account descriptor

job_type = jib$c_network;		! Say this is a network job

!
! Get logical link number from NCB and store remote node info in P1 space
!

IF NOT CH$FAIL(ptr = CH$FIND_CH(.sys$error [0], .sys$error [1], '/'))
THEN
    set_node_name(.(.ptr + 1)<0,16>);	! Set remote node info in P1 space

!
! Check to see if this network job should use the proxy login.  This is 
! determined by checking the low bit of the first word of the string
! described by the sys$output descriptor.  If the bit is set, then attempt
! a proxy login.  If that fails, then use the access control string described 
! by the sys$output descriptor.
!

ptr = ..sys$output[1];			! Get first two words of SYS$OUTPUT string

sys$output[0] = .sys$output[0] - 2;	! Drop flag word off SYS$OUTPUT string
sys$output[1] = .sys$output[1] + 2;

IF NOT
    BEGIN
    IF .ptr<0,1> THEN get_proxy()	! If low bit set then try proxy login
    ELSE FALSE				! Otherwise set FALSE
    END
THEN					! If no proxy, or proxy failed
    BEGIN				! Use the access control string
    ptr = .sys$output [1];		! Get address of SYS$OUTPUT string

    username [0] = CH$RCHAR_A(ptr);	! Get length of username
    username [1] = .ptr;		!  and address of username

    ptr = .ptr + .username [0];		! Skip to password
    password [0] = CH$RCHAR_A(ptr);	! Get length of password
    password [1] = .ptr;		!  and address of password

    ptr = .ptr + .password [0];		! Skip to account
    account [0] = CH$RCHAR_A(ptr);	! Get length of account
    account [1] = .ptr;			!  and address of account

    IF NOT .pcb_sts [$BITPOSITION(pcb$v_login)]
    THEN validate_uafrec(username,	! Lookup in UAF file
			 password,	!  and validate the password
			 UPLIT (0,0));	!   with a null secondary password
    END;

!
! Create SYS$NET logical name with contents of NCB
!

create_logical(%ASCID 'SYS$NET',	! Define SYS$NET
	       sys$error,
	       psl$c_exec);

!
! If the input file has the file type .EXE, then rather than activating
! the CLI and creating a log file, activate the program from a small
! code segment in P1 space.  This is done to optimize network job
! activation time.
!

IF NOT CH$FAIL(CH$FIND_SUB(.sys$input [0], .sys$input [1],
			   4, UPLIT BYTE('.EXE')))
THEN
    BEGIN
    $CMEXEC(ROUTIN = map_imgact);	! Map the imgact code segment into P1
    input_fab [fab$l_fna] = UPLIT BYTE('_NL:');		! Set input to NL:
    input_fab [fab$b_fns] = 4;
    output_fab [fab$l_fna] = .input_fab [fab$l_fna];	! Set output to NL:
    output_fab [fab$b_fns] = .input_fab [fab$b_fns];
    RETURN;				! and return
    END;

!
! Set default filespec for input file
!

input_fab [fab$l_dna] = UPLIT BYTE('CONNECT.COM');
input_fab [fab$b_dns] = 11;

!
! Construct filespec of output log file for network job
!

ptr = (sys$output [1] = .sys$input [1]);
IF (len = (sys$output [0] = .sys$input [0])) NEQ 0
THEN
    BEGIN
    DO
	BEGIN
	LOCAL
	    chr: BYTE;
	chr = CH$RCHAR_A(ptr);
	IF .chr EQL ':'
	OR .chr EQL ']'
	OR .chr EQL '>'
	THEN
	    BEGIN
	    sys$output [1] = .ptr;
	    sys$output [0] = .len - 1;
	    END;
	len = .len - 1;
	END
    WHILE .len GTR 0;
    IF NOT CH$FAIL(ptr = CH$FIND_CH(.sys$output [0], .sys$output [1], '.'))
    THEN
	sys$output [0] = CH$DIFF(.ptr, .sys$output [1]);
    END;

output_fab [fab$b_fns] = .sys$output [0]; ! Set as primary output filespec
output_fab [fab$l_fna] = .sys$output [1];

END;

ROUTINE get_proxy =
!---
!
!	Get the local username that is mapped to the remote username.
!	The remote username is contained in the NCB string described
!	by NCB_DESC, the NCB descriptor.
!
! Inputs:
!
!	sys$error = address of NCB descriptor
!
! Outputs:
!
!	uaf_record = Address of UAF record, if any
!
! Status returns:
!
!	TRUE => Proxy username found
!	FALSE => No proxy username found
!
!---

BEGIN

LOCAL
    status,
    netfab : BBLOCK[fab$c_bln],			! Fab for NETUAF.DAT
    netrab : BBLOCK[rab$c_bln],			! Rab for NETUAF.DAT
    net_record : BBLOCK[naf$c_length],		! Place to put a record
    user_desc : VECTOR[2],			! Username descriptor
    ptr,					! Temp pointer
    node_len,					! Length of node
    node_ptr,					! Pointer to beginning of node
    user_len,					! Length of username
    user_ptr;					! Pointer to beginning of username

!
! Initialize the FAB and RAB
!
$FAB_INIT ( FAB = netfab,
	    FAC = get,				! Want to get records
	    FNM = 'NETUAF',			! Name is NETUAF
	    DNM = 'SYS$SYSTEM:.DAT',		! Look in SYS$SYSTEM
	    SHR = (get,put,upd,del));		! Do shared access
!
! Disable group and process logical name translation.  This must be
! done manually, since $FAB_INIT doesn't know about the disable mask.
!
netfab[fab$v_lnm_mode] = psl$c_exec;

$RAB_INIT ( RAB = netrab,
	    ROP = rrl,				! Don't lock records
	    RAC = key,				! Access is keyed
	    KRF = 0,				! Use primary key
	    KBF = net_record[naf$t_remname],	! Lookup key overlays net record
	    KSZ = naf$s_remname,		! and it's this long
	    UBF = net_record,			! Fetch record and put it here
	    USZ = naf$c_length,			! Size of record
	    FAB = netfab);

!
! Open NETUAF
!
set_sysprv ();
IF NOT (status = $OPEN (FAB = netfab))
THEN
    BEGIN
    clear_sysprv ();
    IF .status EQL rms$_fnf
    THEN RETURN false;
    SIGNAL_STOP (lgi$_netuafacc, 0, .status, .netfab[fab$l_stv]);
    END;

IF NOT (status = $CONNECT (RAB = netrab))
THEN
    BEGIN
    IF .status EQL rms$_crmp
    THEN
	BEGIN
	netfab[fab$w_gbc] = 0;
	status = $CONNECT (RAB = netrab);
	END;
    IF NOT .status
    THEN
	BEGIN
	clear_sysprv ();
	$CLOSE (FAB = netfab);
	SIGNAL_STOP (lgi$_netuafacc, 0, .status, .netrab[rab$l_stv]);
	END;
    END;

clear_sysprv ();

!
! Get the remote node and remote username from the Network Control Block.
! The NCB is an ASCII string that looks like this:
!
!	NODE::"OBJECT=USERNAME/<more stuff>"
!
! Where NODE and USERNAME are the two fields to extract and use as a key,
! to locate the record in NETUAF.DAT which contains the local username to 
! map to.
!

!
! First, get the node.
!

ptr = CH$FIND_SUB ( .sys$error[0],		! Search the NCB string
		    .sys$error[1],	
		    2, UPLIT ('::'));		! Looking for ::

!
! If the node wasn't there, then return FALSE and process with no proxy
!

IF  .ptr EQL 0 OR
    .ptr EQL .sys$error[1]
THEN RETURN false;

node_len = .ptr - .sys$error[1];		! Store node length
node_ptr = .sys$error[1];			! And starting address

!
! Get the username.  This is done by looking for the "=", then the
! "/", and interpreting whatever is between the two characters as the
! username.
!

ptr = CH$FIND_CH ( .sys$error[0],		! Search the NCB string
		   .sys$error[1],
		   '=');			! Looking for equal sign

IF .ptr EQL 0					! If no such character found
THEN RETURN false;				! return a value of FALSE

user_ptr = .ptr + 1;				! Compute beginning of username

ptr = CH$FIND_CH ( .sys$error[0],		! Search the NCB string
		   .sys$error[1],
		   '/');			! Looking for slash

!
! If no slash, or a null username, return FALSE
!

IF  .ptr EQL 0 OR
    .ptr EQL .user_ptr
THEN RETURN false;

!
! Otherwise, compute the username length
!

user_len = .ptr - .user_ptr;

!
! Copy the node and username to NET_KEY, the key buffer that RMS will
! use to look for the specified record.
!
CH$COPY ( .node_len, .node_ptr,			! Copy the nodename
	  ' ',					! Padded with blanks
	  naf$s_node, net_record[naf$t_node]);	! To the key buffer

CH$COPY ( .user_len, .user_ptr,			! Copy the username
	  ' ',					! Padded with blanks
	  naf$s_remuser, net_record[naf$t_remuser]);

!
! Now perform a $GET, so see if there is a record in NETUAF that
! exactly matches the node and username specified.  If no exact match
! is found, wildcarding is applied in the following order:
!
!	Wildcard node, specific user
!	Specific node, wildcard user
!	Wildcard node, wildcard user
!
! If a match is found, then it is used and no further checking is done.
!
IF NOT ($GET (RAB = netrab))
THEN
    BEGIN
    CH$COPY ( 1, UPLIT ('*'),			! Put in wildcard node
	      ' ',
	      naf$s_node, net_record[naf$t_node]);
    IF NOT ($GET (RAB = netrab))
    THEN
	BEGIN
	CH$COPY ( .node_len, .node_ptr,		! Specific node,
		  ' ',
		  naf$s_node, net_record[naf$t_node]);
	CH$COPY ( 1, UPLIT ('*'),		! Wildcard user
		  ' ',
		  naf$s_remuser, net_record[naf$t_remuser]);
	IF NOT ($GET (RAB = netrab))
	THEN
	    BEGIN
	    CH$COPY ( 1, UPLIT ('*'),		! Wildcard node and user
		      ' ',
		     naf$s_node, net_record[naf$t_node]);
	    IF NOT ($GET (RAB = netrab))
	    THEN
		BEGIN
		$CLOSE(FAB = netfab);
		RETURN false;			! If no matches, return false
		END;
	    END;
	END;
    END;
!
! Close NETUAF
!

$CLOSE (FAB = netfab);
!
! If we get here, then a match was found.  Check to see if the local username
! is actually a "*", in which case copy the remote username to the local 
! username.
!

IF .VECTOR [net_record[naf$t_localuser], 0; ,BYTE] EQL '*'
THEN CH$COPY (.user_len, .user_ptr,
	      ' ',
	      naf$s_localuser, net_record[naf$t_localuser]);

! 
! Now fill in the user descriptor with the local username, and call
! GET_UAFREC, to get the UAF record without checking for password.
!

user_desc[0] = naf$s_localuser;
user_desc[1] = net_record[naf$t_localuser];

get_uafrec (user_desc);

!
! Done.  If a UAF record was found, return TRUE.  Otherwise return FALSE.
!

RETURN (.uaf_record NEQ 0);
END;

END
ELUDOM
